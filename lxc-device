#!/usr/bin/python3
#
# lxc-device: Add devices to a running container
#
# This python implementation is based on the work done in the original
# shell implementation done by Serge Hallyn in Ubuntu (and other contributors)
#
# (C) Copyright Canonical Ltd. 2012
#
# Authors:
# St√©phane Graber <stgraber@ubuntu.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# NOTE: To remove once the API is stabilized
import warnings
warnings.filterwarnings("ignore", "The python-lxc API isn't yet stable")

import argparse
import gettext
import lxc
import os
import sys

_ = gettext.gettext
gettext.textdomain("lxc-device")

# Begin parsing the command line
parser = argparse.ArgumentParser(description=_("LXC: Manage devices"),
                                 formatter_class=argparse.RawTextHelpFormatter)

# Global arguments
parser.add_argument("-n", dest="container", metavar="CONTAINER",
                    help=_("Name of the container to add the device to"),
                    required=True)

parser.add_argument("-P", "--lxcpath", dest="lxcpath", metavar="PATH",
                    help=_("Use specified container path"), default=None)

# Commands
subparsers = parser.add_subparsers()
subparser_add = subparsers.add_parser('add', help=_('Add a device'))
subparser_add.set_defaults(action="add")

subparser_add.add_argument(dest="device", metavar="DEVICE",
                           help=_("Add a device "
                                  "(path to a node or interface name)"))

subparser_add.add_argument(dest="name", metavar="NAME", nargs="?",
                           help=_("Use an alternative path or name "
                                  "in the container"))

args = parser.parse_args()

# Some basic checks
if not hasattr(args, "action"):
    parser.error(_("You must specify an action."))

## The user needs to be uid 0
if not os.geteuid() == 0:
    parser.error(_("You must be root to run this script. Try running: sudo %s"
                   % (sys.argv[0])))

## Don't rename if no alternative name
if not args.name:
    args.name = args.device

## Check that the container is ready
container = lxc.Container(args.container, args.lxcpath)

if not container.running:
    parser.error("The container must be running.")

# Do the work
if args.action == "add":
    if os.path.exists("/sys/class/net/%s/" % args.device):
        ret = container.add_device_net(args.device, args.name)
    else:
        ret = container.add_device_node(args.device, args.name)

    if ret:
        print("Added '%s' to '%s' as '%s'." %
              (args.device, container.name, args.name))
    else:
        print("Failed to add '%s' to '%s' as '%s'." %
              (args.device, container.name, args.name))
